// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package otm

import "encoding/json"
import "fmt"

// UnmarshalJSON implements json.Unmarshaler.
func (j *OtmSchemaJsonDataflowsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["destination"]; !ok || v == nil {
		return fmt.Errorf("field destination in OtmSchemaJsonDataflowsElem: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in OtmSchemaJsonDataflowsElem: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in OtmSchemaJsonDataflowsElem: required")
	}
	if v, ok := raw["source"]; !ok || v == nil {
		return fmt.Errorf("field source in OtmSchemaJsonDataflowsElem: required")
	}
	type Plain OtmSchemaJsonDataflowsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = OtmSchemaJsonDataflowsElem(plain)
	return nil
}

type OtmSchemaJson struct {
	// Assets corresponds to the JSON schema field "assets".
	Assets []interface{} `json:"assets,omitempty" yaml:"assets,omitempty" mapstructure:"assets,omitempty"`

	// Components corresponds to the JSON schema field "components".
	Components []OtmSchemaJsonComponentsElem `json:"components,omitempty" yaml:"components,omitempty" mapstructure:"components,omitempty"`

	// Dataflows corresponds to the JSON schema field "dataflows".
	Dataflows []OtmSchemaJsonDataflowsElem `json:"dataflows,omitempty" yaml:"dataflows,omitempty" mapstructure:"dataflows,omitempty"`

	// Mitigations corresponds to the JSON schema field "mitigations".
	Mitigations []OtmSchemaJsonMitigationsElem `json:"mitigations,omitempty" yaml:"mitigations,omitempty" mapstructure:"mitigations,omitempty"`

	// OtmVersion corresponds to the JSON schema field "otmVersion".
	OtmVersion string `json:"otmVersion" yaml:"otmVersion" mapstructure:"otmVersion"`

	// Project corresponds to the JSON schema field "project".
	Project OtmSchemaJsonProject `json:"project" yaml:"project" mapstructure:"project"`

	// Representations corresponds to the JSON schema field "representations".
	Representations []interface{} `json:"representations,omitempty" yaml:"representations,omitempty" mapstructure:"representations,omitempty"`

	// Threats corresponds to the JSON schema field "threats".
	Threats []OtmSchemaJsonThreatsElem `json:"threats,omitempty" yaml:"threats,omitempty" mapstructure:"threats,omitempty"`

	// TrustZones corresponds to the JSON schema field "trustZones".
	TrustZones []OtmSchemaJsonTrustZonesElem `json:"trustZones,omitempty" yaml:"trustZones,omitempty" mapstructure:"trustZones,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OtmSchemaJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["otmVersion"]; !ok || v == nil {
		return fmt.Errorf("field otmVersion in OtmSchemaJson: required")
	}
	if v, ok := raw["project"]; !ok || v == nil {
		return fmt.Errorf("field project in OtmSchemaJson: required")
	}
	type Plain OtmSchemaJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = OtmSchemaJson(plain)
	return nil
}

type AssetInstance struct {
	// Processed corresponds to the JSON schema field "processed".
	Processed []*string `json:"processed,omitempty" yaml:"processed,omitempty" mapstructure:"processed,omitempty"`

	// Stored corresponds to the JSON schema field "stored".
	Stored []*string `json:"stored,omitempty" yaml:"stored,omitempty" mapstructure:"stored,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OtmSchemaJsonTrustZonesElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in OtmSchemaJsonTrustZonesElem: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in OtmSchemaJsonTrustZonesElem: required")
	}
	if v, ok := raw["risk"]; !ok || v == nil {
		return fmt.Errorf("field risk in OtmSchemaJsonTrustZonesElem: required")
	}
	type Plain OtmSchemaJsonTrustZonesElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = OtmSchemaJsonTrustZonesElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OtmSchemaJsonTrustZonesElemRisk) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["trustRating"]; !ok || v == nil {
		return fmt.Errorf("field trustRating in OtmSchemaJsonTrustZonesElemRisk: required")
	}
	type Plain OtmSchemaJsonTrustZonesElemRisk
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = OtmSchemaJsonTrustZonesElemRisk(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Size) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["height"]; !ok || v == nil {
		return fmt.Errorf("field height in Size: required")
	}
	if v, ok := raw["width"]; !ok || v == nil {
		return fmt.Errorf("field width in Size: required")
	}
	type Plain Size
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Size(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OtmSchemaJsonThreatsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in OtmSchemaJsonThreatsElem: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in OtmSchemaJsonThreatsElem: required")
	}
	if v, ok := raw["risk"]; !ok || v == nil {
		return fmt.Errorf("field risk in OtmSchemaJsonThreatsElem: required")
	}
	type Plain OtmSchemaJsonThreatsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = OtmSchemaJsonThreatsElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RepresentationElement) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in RepresentationElement: required")
	}
	if v, ok := raw["representation"]; !ok || v == nil {
		return fmt.Errorf("field representation in RepresentationElement: required")
	}
	type Plain RepresentationElement
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = RepresentationElement(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OtmSchemaJsonThreatsElemRisk) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["impact"]; !ok || v == nil {
		return fmt.Errorf("field impact in OtmSchemaJsonThreatsElemRisk: required")
	}
	if v, ok := raw["likelihood"]; !ok || v == nil {
		return fmt.Errorf("field likelihood in OtmSchemaJsonThreatsElemRisk: required")
	}
	type Plain OtmSchemaJsonThreatsElemRisk
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = OtmSchemaJsonThreatsElemRisk(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ThreatMitigationsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["mitigation"]; !ok || v == nil {
		return fmt.Errorf("field mitigation in ThreatMitigationsElem: required")
	}
	if v, ok := raw["state"]; !ok || v == nil {
		return fmt.Errorf("field state in ThreatMitigationsElem: required")
	}
	type Plain ThreatMitigationsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ThreatMitigationsElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OtmSchemaJsonProject) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in OtmSchemaJsonProject: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in OtmSchemaJsonProject: required")
	}
	type Plain OtmSchemaJsonProject
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = OtmSchemaJsonProject(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Threat) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["state"]; !ok || v == nil {
		return fmt.Errorf("field state in Threat: required")
	}
	if v, ok := raw["threat"]; !ok || v == nil {
		return fmt.Errorf("field threat in Threat: required")
	}
	type Plain Threat
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Threat(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OtmSchemaJsonMitigationsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in OtmSchemaJsonMitigationsElem: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in OtmSchemaJsonMitigationsElem: required")
	}
	if v, ok := raw["riskReduction"]; !ok || v == nil {
		return fmt.Errorf("field riskReduction in OtmSchemaJsonMitigationsElem: required")
	}
	type Plain OtmSchemaJsonMitigationsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = OtmSchemaJsonMitigationsElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Position) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["x"]; !ok || v == nil {
		return fmt.Errorf("field x in Position: required")
	}
	if v, ok := raw["y"]; !ok || v == nil {
		return fmt.Errorf("field y in Position: required")
	}
	type Plain Position
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Position(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OtmSchemaJsonComponentsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in OtmSchemaJsonComponentsElem: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in OtmSchemaJsonComponentsElem: required")
	}
	if v, ok := raw["parent"]; !ok || v == nil {
		return fmt.Errorf("field parent in OtmSchemaJsonComponentsElem: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in OtmSchemaJsonComponentsElem: required")
	}
	type Plain OtmSchemaJsonComponentsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = OtmSchemaJsonComponentsElem(plain)
	return nil
}

type OtmSchemaJsonMitigationsElem struct {
	// Attributes corresponds to the JSON schema field "attributes".
	Attributes OtmSchemaJsonMitigationsElemAttributes `json:"attributes,omitempty" yaml:"attributes,omitempty" mapstructure:"attributes,omitempty"`

	// Description corresponds to the JSON schema field "description".
	Description *string `json:"description,omitempty" yaml:"description,omitempty" mapstructure:"description,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// RiskReduction corresponds to the JSON schema field "riskReduction".
	RiskReduction float64 `json:"riskReduction" yaml:"riskReduction" mapstructure:"riskReduction"`
}

type OtmSchemaJsonDataflowsElem struct {
	// Assets corresponds to the JSON schema field "assets".
	Assets []*string `json:"assets,omitempty" yaml:"assets,omitempty" mapstructure:"assets,omitempty"`

	// Attributes corresponds to the JSON schema field "attributes".
	Attributes OtmSchemaJsonDataflowsElemAttributes `json:"attributes,omitempty" yaml:"attributes,omitempty" mapstructure:"attributes,omitempty"`

	// Bidirectional corresponds to the JSON schema field "bidirectional".
	Bidirectional *bool `json:"bidirectional,omitempty" yaml:"bidirectional,omitempty" mapstructure:"bidirectional,omitempty"`

	// Description corresponds to the JSON schema field "description".
	Description *string `json:"description,omitempty" yaml:"description,omitempty" mapstructure:"description,omitempty"`

	// Destination corresponds to the JSON schema field "destination".
	Destination string `json:"destination" yaml:"destination" mapstructure:"destination"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Source corresponds to the JSON schema field "source".
	Source string `json:"source" yaml:"source" mapstructure:"source"`

	// Tags corresponds to the JSON schema field "tags".
	Tags []*string `json:"tags,omitempty" yaml:"tags,omitempty" mapstructure:"tags,omitempty"`

	// Threats corresponds to the JSON schema field "threats".
	Threats []Threat `json:"threats,omitempty" yaml:"threats,omitempty" mapstructure:"threats,omitempty"`
}

type OtmSchemaJsonComponentsElem struct {
	// Assets corresponds to the JSON schema field "assets".
	Assets *AssetInstance `json:"assets,omitempty" yaml:"assets,omitempty" mapstructure:"assets,omitempty"`

	// Attributes corresponds to the JSON schema field "attributes".
	Attributes OtmSchemaJsonComponentsElemAttributes `json:"attributes,omitempty" yaml:"attributes,omitempty" mapstructure:"attributes,omitempty"`

	// Description corresponds to the JSON schema field "description".
	Description *string `json:"description,omitempty" yaml:"description,omitempty" mapstructure:"description,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Parent corresponds to the JSON schema field "parent".
	Parent Parent `json:"parent" yaml:"parent" mapstructure:"parent"`

	// Representations corresponds to the JSON schema field "representations".
	Representations []RepresentationElement `json:"representations,omitempty" yaml:"representations,omitempty" mapstructure:"representations,omitempty"`

	// Tags corresponds to the JSON schema field "tags".
	Tags []*string `json:"tags,omitempty" yaml:"tags,omitempty" mapstructure:"tags,omitempty"`

	// Threats corresponds to the JSON schema field "threats".
	Threats []Threat `json:"threats,omitempty" yaml:"threats,omitempty" mapstructure:"threats,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type" mapstructure:"type"`
}

type OtmSchemaJsonDataflowsElemAttributes map[string]interface{}

type OtmSchemaJsonComponentsElemAttributes map[string]interface{}

type OtmSchemaJsonMitigationsElemAttributes map[string]interface{}

type OtmSchemaJsonProject struct {
	// Attributes corresponds to the JSON schema field "attributes".
	Attributes OtmSchemaJsonProjectAttributes `json:"attributes,omitempty" yaml:"attributes,omitempty" mapstructure:"attributes,omitempty"`

	// Description corresponds to the JSON schema field "description".
	Description *string `json:"description,omitempty" yaml:"description,omitempty" mapstructure:"description,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Owner corresponds to the JSON schema field "owner".
	Owner *string `json:"owner,omitempty" yaml:"owner,omitempty" mapstructure:"owner,omitempty"`

	// OwnerContact corresponds to the JSON schema field "ownerContact".
	OwnerContact *string `json:"ownerContact,omitempty" yaml:"ownerContact,omitempty" mapstructure:"ownerContact,omitempty"`

	// Tags corresponds to the JSON schema field "tags".
	Tags []string `json:"tags,omitempty" yaml:"tags,omitempty" mapstructure:"tags,omitempty"`
}

type OtmSchemaJsonProjectAttributes map[string]interface{}

type OtmSchemaJsonThreatsElem struct {
	// Attributes corresponds to the JSON schema field "attributes".
	Attributes OtmSchemaJsonThreatsElemAttributes `json:"attributes,omitempty" yaml:"attributes,omitempty" mapstructure:"attributes,omitempty"`

	// Categories corresponds to the JSON schema field "categories".
	Categories []*string `json:"categories,omitempty" yaml:"categories,omitempty" mapstructure:"categories,omitempty"`

	// Cwes corresponds to the JSON schema field "cwes".
	Cwes []*string `json:"cwes,omitempty" yaml:"cwes,omitempty" mapstructure:"cwes,omitempty"`

	// Description corresponds to the JSON schema field "description".
	Description *string `json:"description,omitempty" yaml:"description,omitempty" mapstructure:"description,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Risk corresponds to the JSON schema field "risk".
	Risk OtmSchemaJsonThreatsElemRisk `json:"risk" yaml:"risk" mapstructure:"risk"`

	// Tags corresponds to the JSON schema field "tags".
	Tags []*string `json:"tags,omitempty" yaml:"tags,omitempty" mapstructure:"tags,omitempty"`
}

type OtmSchemaJsonThreatsElemAttributes map[string]interface{}

type OtmSchemaJsonThreatsElemRisk struct {
	// Impact corresponds to the JSON schema field "impact".
	Impact float64 `json:"impact" yaml:"impact" mapstructure:"impact"`

	// ImpactComment corresponds to the JSON schema field "impactComment".
	ImpactComment *string `json:"impactComment,omitempty" yaml:"impactComment,omitempty" mapstructure:"impactComment,omitempty"`

	// Likelihood corresponds to the JSON schema field "likelihood".
	Likelihood *float64 `json:"likelihood" yaml:"likelihood" mapstructure:"likelihood"`

	// LikelihoodComment corresponds to the JSON schema field "likelihoodComment".
	LikelihoodComment *string `json:"likelihoodComment,omitempty" yaml:"likelihoodComment,omitempty" mapstructure:"likelihoodComment,omitempty"`
}

type OtmSchemaJsonTrustZonesElem struct {
	// Attributes corresponds to the JSON schema field "attributes".
	Attributes OtmSchemaJsonTrustZonesElemAttributes `json:"attributes,omitempty" yaml:"attributes,omitempty" mapstructure:"attributes,omitempty"`

	// Description corresponds to the JSON schema field "description".
	Description *string `json:"description,omitempty" yaml:"description,omitempty" mapstructure:"description,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Parent corresponds to the JSON schema field "parent".
	Parent *Parent `json:"parent,omitempty" yaml:"parent,omitempty" mapstructure:"parent,omitempty"`

	// Representations corresponds to the JSON schema field "representations".
	Representations []RepresentationElement `json:"representations,omitempty" yaml:"representations,omitempty" mapstructure:"representations,omitempty"`

	// Risk corresponds to the JSON schema field "risk".
	Risk OtmSchemaJsonTrustZonesElemRisk `json:"risk" yaml:"risk" mapstructure:"risk"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type OtmSchemaJsonTrustZonesElemAttributes map[string]interface{}

type OtmSchemaJsonTrustZonesElemRisk struct {
	// TrustRating corresponds to the JSON schema field "trustRating".
	TrustRating float64 `json:"trustRating" yaml:"trustRating" mapstructure:"trustRating"`
}

type Parent struct {
	// Component corresponds to the JSON schema field "component".
	Component *string `json:"component,omitempty" yaml:"component,omitempty" mapstructure:"component,omitempty"`

	// TrustZone corresponds to the JSON schema field "trustZone".
	TrustZone *string `json:"trustZone,omitempty" yaml:"trustZone,omitempty" mapstructure:"trustZone,omitempty"`
}

type Position struct {
	// X corresponds to the JSON schema field "x".
	X float64 `json:"x" yaml:"x" mapstructure:"x"`

	// Y corresponds to the JSON schema field "y".
	Y float64 `json:"y" yaml:"y" mapstructure:"y"`
}

type RepresentationElement struct {
	// Attributes corresponds to the JSON schema field "attributes".
	Attributes RepresentationElementAttributes `json:"attributes,omitempty" yaml:"attributes,omitempty" mapstructure:"attributes,omitempty"`

	// CodeSnippet corresponds to the JSON schema field "codeSnippet".
	CodeSnippet *string `json:"codeSnippet,omitempty" yaml:"codeSnippet,omitempty" mapstructure:"codeSnippet,omitempty"`

	// File corresponds to the JSON schema field "file".
	File *string `json:"file,omitempty" yaml:"file,omitempty" mapstructure:"file,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Line corresponds to the JSON schema field "line".
	Line *float64 `json:"line,omitempty" yaml:"line,omitempty" mapstructure:"line,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// Position corresponds to the JSON schema field "position".
	Position *Position `json:"position,omitempty" yaml:"position,omitempty" mapstructure:"position,omitempty"`

	// Representation corresponds to the JSON schema field "representation".
	Representation string `json:"representation" yaml:"representation" mapstructure:"representation"`

	// Size corresponds to the JSON schema field "size".
	Size *Size `json:"size,omitempty" yaml:"size,omitempty" mapstructure:"size,omitempty"`
}

type RepresentationElementAttributes map[string]interface{}

type Size struct {
	// Height corresponds to the JSON schema field "height".
	Height float64 `json:"height" yaml:"height" mapstructure:"height"`

	// Width corresponds to the JSON schema field "width".
	Width float64 `json:"width" yaml:"width" mapstructure:"width"`
}

type Threat struct {
	// Mitigations corresponds to the JSON schema field "mitigations".
	Mitigations []ThreatMitigationsElem `json:"mitigations,omitempty" yaml:"mitigations,omitempty" mapstructure:"mitigations,omitempty"`

	// State corresponds to the JSON schema field "state".
	State string `json:"state" yaml:"state" mapstructure:"state"`

	// Threat corresponds to the JSON schema field "threat".
	Threat string `json:"threat" yaml:"threat" mapstructure:"threat"`
}

type ThreatMitigationsElem struct {
	// Mitigation corresponds to the JSON schema field "mitigation".
	Mitigation *string `json:"mitigation" yaml:"mitigation" mapstructure:"mitigation"`

	// State corresponds to the JSON schema field "state".
	State *string `json:"state" yaml:"state" mapstructure:"state"`
}
